// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// PHS:  C++ port done (not tested yet)

package org.usfirst.frc4513.Showbot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4513.Showbot.Robot;

/**
 *
 */
public class CmdPressureControl extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CmdPressureControl() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // PHS: added these member variables based on .h file
    // PHSPROBLEM:  Is there an error here? These are not initialized, and they aren't
    //              initialized in the C++ code either, yet they are dereferenced.
    //              Dereferencing an uninitialized object pointer should be a problem. 
	Command startCommand ;
	Command stopCommand ;

    // Called just before this Command runs the first time
    protected void initialize() {
    	// PHSQUESTION: Is this correct? It is interruptible, but interrupted() is empty?
    	this.setInterruptible(true);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putBoolean("Enabled Status", Robot.compressorSubSys.getEnabledStatus());
    	SmartDashboard.putBoolean("Pressure Switch",Robot.compressorSubSys.getPressureSwitchStatus());
    	SmartDashboard.putBoolean("Running Status",Robot.compressorSubSys.getRunningStatus());
    		if ((Robot.compressorSubSys.getEnabledStatus() == true)
    				&& (Robot.compressorSubSys.getPressureSwitchStatus()== false)
    				&& (Robot.compressorSubSys.getRunningStatus()== false)) {
    			startCommand.start();
    		}
    		if ((Robot.compressorSubSys.getEnabledStatus() == false)
    				|| ((Robot.compressorSubSys.getPressureSwitchStatus()== true)
    				&& (Robot.compressorSubSys.getRunningStatus()== true))) {
    			stopCommand.start();
    		}    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

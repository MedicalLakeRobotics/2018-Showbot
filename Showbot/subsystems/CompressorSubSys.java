// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// PHS: C++ port done (not tested)


package org.usfirst.frc4513.Showbot.subsystems;

import org.usfirst.frc4513.Showbot.RobotMap;
import edu.wpi.first.wpilibj.Compressor;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class CompressorSubSys extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Compressor compressor = RobotMap.compressorSubSysCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // PHS: added these member variables based on .h file
    //      and initialized them based on .cpp file
    //      The more common Java naming standard would be mEnabled and mRunning
    //      but I left the names same as in C++ code
	boolean m_enabled = false;
	boolean m_running = false;

	// PHS: not sure this is appropriate until tested
	//      The issue is this: generated code for C++ included a no-arg constructor
	//      but for Java it did not, so I'm adding one manually to get the corresponding work done.
	//      There may be another way?
	//      Also, the variable initializations above could be moved to this constructor.
	//      It's considered bad practice to init member vars in both places, but I left the
	//      simple var inits outside the constructor to illustrate that you can in fact
	//      init vars without a constructor. Here we need a constructor for other reasons.
	// PHSQUESTION: would this code be more appropriate in initDefaultCommand() ?
	public CompressorSubSys() {
		compressor.setClosedLoopControl(false);		// run compressor manually	
	}

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    // PHS: ported these from C++.
    public void motorTurnOn() {
    	compressor.start();
    	m_running = true;
    }
    
    public void motorTurnOff() {
    	compressor.stop();
    	m_running = false;
    }
    
    // PHSNOTE: had to import SmartDashboard for this
    //    removed the type cast code as it isn't necessary (at least not syntactically in Java version)
    public boolean getPressureSwitchStatus() {
    	SmartDashboard.putBoolean("Pressure Switch", compressor.getPressureSwitchValue());
    	return compressor.getPressureSwitchValue();
    }
    
    public boolean getEnabledStatus() {
    	SmartDashboard.putBoolean("Enabled Status", m_enabled);
    	return m_enabled;
    }
    
    public void setEnabledStatus(boolean status) {
    	if (status == true){
    		compressor.setClosedLoopControl(true);		// run compressor manually
    	}
    	else{
    		compressor.setClosedLoopControl(false);		// run compressor manually
    		motorTurnOff();
    	}
    	m_enabled = status;
    }
    
    public boolean getRunningStatus() {
    	SmartDashboard.putBoolean("Running Status", m_running);
    	return m_running;
    }
    
    public void setRunningStatus(boolean status) {
    	m_running = status;
    }  
}


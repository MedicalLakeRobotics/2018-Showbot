// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4513.Showbot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon drivetrainRearRightSpdCtr;
    public static CANTalon drivetrainRearLeftSpdCtr;
    public static CANTalon drivetrainFrontRightSpdCtr;
    public static CANTalon drivetrainFrontLeftSpdCtr;
    public static RobotDrive drivetrainRobotDrive41;
    public static Encoder drivetrainLeftDriveEncoder;
    public static Encoder drivetrainRightDriveEncoder;
    public static Compressor compressorSubSysCompressor;
    public static Relay hornHornRelay;
    public static SpeedController ledsledsBlurCtrlr;
    public static SpeedController ledsledsRedCtrlr;
    public static Relay cannonCannonSpike;
    public static DoubleSolenoid cannonDblSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainRearRightSpdCtr = new CANTalon(4);
        LiveWindow.addActuator("Drivetrain", "RearRightSpdCtr", drivetrainRearRightSpdCtr);
        
        drivetrainRearLeftSpdCtr = new CANTalon(3);
        LiveWindow.addActuator("Drivetrain", "RearLeftSpdCtr", drivetrainRearLeftSpdCtr);
        
        drivetrainFrontRightSpdCtr = new CANTalon(2);
        LiveWindow.addActuator("Drivetrain", "FrontRightSpdCtr", drivetrainFrontRightSpdCtr);
        
        drivetrainFrontLeftSpdCtr = new CANTalon(1);
        LiveWindow.addActuator("Drivetrain", "FrontLeftSpdCtr", drivetrainFrontLeftSpdCtr);
        
        drivetrainRobotDrive41 = new RobotDrive(drivetrainFrontLeftSpdCtr, drivetrainRearLeftSpdCtr,
              drivetrainFrontRightSpdCtr, drivetrainRearRightSpdCtr);
        
        drivetrainRobotDrive41.setSafetyEnabled(true);
        drivetrainRobotDrive41.setExpiration(0.1);
        drivetrainRobotDrive41.setSensitivity(0.5);
        drivetrainRobotDrive41.setMaxOutput(1.0);
        drivetrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivetrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivetrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivetrainLeftDriveEncoder = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "LeftDriveEncoder", drivetrainLeftDriveEncoder);
        drivetrainLeftDriveEncoder.setDistancePerPulse(1.0);
        drivetrainLeftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainRightDriveEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RightDriveEncoder", drivetrainRightDriveEncoder);
        drivetrainRightDriveEncoder.setDistancePerPulse(1.0);
        drivetrainRightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        compressorSubSysCompressor = new Compressor(0);
        
        
        hornHornRelay = new Relay(1);
        LiveWindow.addActuator("Horn", "HornRelay", hornHornRelay);
        
        ledsledsBlurCtrlr = new Talon(1);
        LiveWindow.addActuator("Leds", "ledsBlurCtrlr", (Talon) ledsledsBlurCtrlr);
        
        ledsledsRedCtrlr = new Talon(2);
        LiveWindow.addActuator("Leds", "ledsRedCtrlr", (Talon) ledsledsRedCtrlr);
        
        cannonCannonSpike = new Relay(0);
        LiveWindow.addActuator("Cannon", "CannonSpike", cannonCannonSpike);
        
        cannonDblSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Cannon", "DblSolenoid", cannonDblSolenoid);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
